{"ast":null,"code":"import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\nexport const getAllUserTalks = id => async dispatch => {\n  try {\n    let foundAllUserTalks = await Axios.get(\"/talk/get-all-user-talks/\".concat(id));\n    console.log(foundAllUserTalks);\n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    });\n    return Promise.resolve(foundAllUserTalks);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const createTalk = talkInfo => async dispatch => {\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title,\n    talk: talkInfo.talk,\n    image: talkInfo.image\n  };\n\n  try {\n    let success = await Axios.post('/talk/create-talk', talkObj);\n    console.log(success);\n    dispatch(successCreateTalk(success.data));\n    return Promise.resolve(success);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const getAllTalks = () => async dispatch => {\n  try {\n    let success = await Axios.get(\"/talk/get-all-talks\");\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    });\n    return Promise.resolve(success.data);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\n\nconst successCreateTalk = createdTalk => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  });\n};\n\nconst errorCreateTalk = message => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  });\n};\n\nexport const getTalkByID = id => async dispatch => {\n  try {\n    let foundTalk = await Axios.get(\"/talk/get-talk-by-id/\".concat(id));\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n    return Promise.resolve(foundTalk.data);\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/redux/action/talkAction.js"],"names":["CREATE_TALK","ERROR_CREATE_TALK","GET_ALL_TALKS","GET_TALK_BY_ID","GET_ALL_USER_TALKS","Axios","getAllUserTalks","id","dispatch","foundAllUserTalks","get","console","log","type","payload","data","Promise","resolve","error","errorCreateTalk","reject","createTalk","talkInfo","talkObj","title","talk","image","success","post","successCreateTalk","getAllTalks","createdTalk","message","getTalkByID","foundTalk"],"mappings":"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","sourcesContent":["import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n    console.log(foundAllUserTalks)\n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n    console.log(success)\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}