{"ast":null,"code":"var _jsxFileName = \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup, handleErrorSignup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport MessageBar from '../../Factory/MessageBar/MessageBar';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        gender: '',\n        redirectSecond: 0\n      },\n      submitted: false\n    };\n\n    this.countdownSecond = () => {\n      var timeleft = 3;\n      var downloadTimer = setInterval(function () {\n        let redirectSecond = 4 - timeleft;\n        console.log(redirectSecond);\n        this.setState({\n          redirectSecond\n        });\n        timeleft -= 1;\n\n        if (timeleft <= 0) {\n          clearInterval(downloadTimer);\n        }\n      }.bind(this), 1000);\n    };\n\n    this.handleChange = event => {\n      const formData = this.state.formData;\n      formData[event.target.name] = event.target.value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        submitted: true\n      }, () => {\n        this.props.signup(this.state.formData).then(success => {\n          console.log(success);\n          this.setState({\n            submitted: false,\n            formData: {\n              name: '',\n              email: '',\n              password: '',\n              confirmPassword: '',\n              gender: ''\n            }\n          });\n          setTimeout(() => {\n            this.props.history.push('/sign-up');\n          }, 3000);\n        }).catch(error => {\n          this.props.handleErrorSignup(error.response.data.message);\n          this.setState({\n            submitted: false\n          });\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.countdownSecond(); // custom rule will have name 'isPasswordMatch'\n\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      const formData = this.state.formData;\n\n      if (value !== formData.password) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  render() {\n    const submitted = this.state.submitted;\n    let form = formArray.map((field, index) => {\n      return React.createElement(\"div\", {\n        key: field.input.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Input, Object.assign({}, field, this.state.formData, {\n        handleInputChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.redirectSecond), this.props.message.serverMessage !== null ? React.createElement(MessageBar, {\n      fontColorStyle: this.props.message.messageStyle.fontColorStyle,\n      dynamicClassName: this.props.message.messageStyle.dynamicClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.props.message.serverMessage) : '', React.createElement(ValidatorForm, {\n      className: \"Form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, submitted ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }) : form, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(ButtonClass, {\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, submitted && 'Your form is submitted!' || !submitted && 'Submit')));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signup,\n  handleErrorSignup\n})(Signup);","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js"],"names":["React","Component","connect","Input","ButtonClass","ValidatorForm","formArray","signup","handleErrorSignup","Spinner","MessageBar","Signup","state","formData","username","email","password","confirmPassword","gender","redirectSecond","submitted","countdownSecond","timeleft","downloadTimer","setInterval","console","log","setState","clearInterval","bind","handleChange","event","target","name","value","handleSubmit","preventDefault","props","then","success","setTimeout","history","push","catch","error","response","data","message","componentDidMount","addValidationRule","render","form","map","field","index","input","label","serverMessage","messageStyle","fontColorStyle","dynamicClassName","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass'\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup, handleErrorSignup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner'\nimport MessageBar from '../../Factory/MessageBar/MessageBar';\n\n\nclass Signup extends Component {\n\n  state = {\n    formData: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      gender: '',\n      redirectSecond: 0\n    },\n    submitted: false,\n  }\n\n  componentDidMount() {\n    this.countdownSecond()\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n        const { formData } = this.state;\n        if (value !== formData.password) {\n            return false;\n        }\n        return true;\n    });\n  }\n\n  countdownSecond = () => {\n    var timeleft = 3;\n    var downloadTimer = setInterval(function(){\n      let redirectSecond = 4 - timeleft;\n      console.log(redirectSecond)\n      this.setState({\n        redirectSecond\n      })\n      timeleft -= 1;\n      if(timeleft <= 0){\n        clearInterval(downloadTimer);\n      }\n    }.bind(this), 1000);\n  }\n\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n\n\n  handleSubmit = (event) => {\n\n      event.preventDefault();\n\n\n      this.setState({ \n          submitted: true, \n        }, () => {\n\n          this.props.signup(this.state.formData)\n              .then(success => {\n                console.log(success)\n                this.setState({\n                  submitted: false,\n                  formData: {\n                    name: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                    gender: ''\n                  }\n                })\n                \n                \n                setTimeout(() => {\n                  this.props.history.push('/sign-up')\n                }, 3000)      \n        \n              })\n              .catch(error => {\n    \n                this.props.handleErrorSignup(error.response.data.message)\n                this.setState({\n                  submitted: false\n                })\n              })\n      });\n  }\n\n  render() {\n    \n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    ) \n     \n    return (\n\n    \n      <>  \n      <h1>{this.state.redirectSecond}</h1>\n      {this.props.message.serverMessage !== null ? <MessageBar \n                                              fontColorStyle={this.props.message.messageStyle.fontColorStyle}\n                                              dynamicClassName={this.props.message.messageStyle.dynamicClassName}\n                                              >{this.props.message.serverMessage}</MessageBar> : '' }\n\n\n      <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            \n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n            \n          </ValidatorForm>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message\n  }\n}\n\nexport default connect(mapStateToProps, { signup, handleErrorSignup })(Signup)"]},"metadata":{},"sourceType":"module"}