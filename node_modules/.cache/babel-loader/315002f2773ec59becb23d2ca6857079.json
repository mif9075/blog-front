{"ast":null,"code":"var _jsxFileName = \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        gender: ''\n      },\n      submitted: false\n    };\n\n    this.handleChange = event => {\n      const formData = this.state.formData;\n      formData[event.target.name] = event.target.value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        submitted: true\n      }, () => {\n        this.props.signup(this.state.formData).then(success => {\n          console.log(success);\n          this.setState({\n            submitted: false\n          });\n        }).catch(error => {\n          console.log(error.response.data.message);\n          this.setState({\n            submitted: false\n          });\n        }); // this.props.signup(this.state.formData)\n        // this.setState({\n        //   submitted: false,\n        //   formData: {\n        //     name: '',\n        //     email: '',\n        //     password: '',\n        //     confirmPassword: '',\n        //     gender: ''\n        //   }\n        // })\n        // this.props.history.push('/')\n      });\n    };\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      const formData = this.state.formData;\n\n      if (value !== formData.password) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  render() {\n    const submitted = this.state.submitted;\n    let form = formArray.map((field, index) => {\n      return React.createElement(\"div\", {\n        key: field.input.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Input, Object.assign({}, field, this.state.formData, {\n        handleInputChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Username already exist\"), React.createElement(ValidatorForm, {\n      className: \"Form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, submitted ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : form, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(ButtonClass, {\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, submitted && 'Your form is submitted!' || !submitted && 'Submit')));\n  }\n\n}\n\nexport default connect(null, {\n  signup\n})(Signup);","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js"],"names":["React","Component","connect","Input","ButtonClass","ValidatorForm","formArray","signup","Spinner","Signup","state","formData","username","email","password","confirmPassword","gender","submitted","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","props","then","success","console","log","catch","error","response","data","message","componentDidMount","addValidationRule","render","form","map","field","index","input","label"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass'\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner'\n\n\n\nclass Signup extends Component {\n\n  state = {\n    formData: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      gender: ''\n    },\n    submitted: false,\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n        const { formData } = this.state;\n        if (value !== formData.password) {\n            return false;\n        }\n        return true;\n    });\n  }\n\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n  handleSubmit = (event) => {\n\n      event.preventDefault();\n\n\n      this.setState({ \n          submitted: true, \n        }, () => {\n\n          this.props.signup(this.state.formData)\n              .then(success => {\n                console.log(success)\n                this.setState({\n                  submitted: false\n                })\n              })\n              .catch(error => {\n                console.log(error.response.data.message)\n                this.setState({\n                  submitted: false\n                })\n              })\n\n          // this.props.signup(this.state.formData)\n          // this.setState({\n          //   submitted: false,\n          //   formData: {\n          //     name: '',\n          //     email: '',\n          //     password: '',\n          //     confirmPassword: '',\n          //     gender: ''\n          //   }\n          // })\n          \n          // this.props.history.push('/')\n      });\n  }\n\n  render() {\n    \n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    )\n\n    return (\n      <>  \n\n      <h1 className='App'>Username already exist</h1>\n      <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            \n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n            \n          </ValidatorForm>\n\n      </>\n    )\n  }\n}\n\nexport default connect(null, { signup })(Signup)"]},"metadata":{},"sourceType":"module"}