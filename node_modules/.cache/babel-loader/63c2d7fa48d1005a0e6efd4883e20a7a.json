{"ast":null,"code":"import _defineProperty from \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/CreateTalk/CreateTalk.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport formArray from './CreateTalkConfig';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport Input from '../../Factory/Input/InputClass';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { createTalk } from '../../redux/action/talkAction';\n\nclass CreateTalk extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {\n        title: '',\n        talk: '',\n        image: ''\n      },\n      submitted: false,\n      uploadPictureToggle: false\n    };\n\n    this.uploadWidget = () => {\n      window.cloudinary.openUploadWidget({\n        cloud_name: 'dy6xduf53',\n        upload_preset: 'gxaofwpa',\n        tags: ['hamster']\n      }, (error, result) => {\n        if (error) {\n          console.log(error);\n        } else {\n          if (result.event === 'success') {\n            console.log(result.info.secure_url);\n            const formData = this.state.formData;\n            formData['image'] = result.info.secure_url;\n            this.setState(_objectSpread({}, this.state, {\n              formData\n            }));\n          }\n        }\n      });\n    };\n\n    this.successfullyCreatedTalk = () => {\n      this.setState({\n        submitted: false,\n        formData: {\n          email: '',\n          password: ''\n        }\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        submitted: true\n      }, () => {\n        let newUserObj = Object.assign({}, this.state.formData);\n        newUserObj.id = this.props.authUser.user.id;\n        this.props.createTalk(newUserObj).then(() => {\n          this.successfullyCreatedTalk();\n          this.props.history.push('/');\n        }).catch(error => {\n          console.log(error);\n          this.setState({\n            submitted: false\n          });\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      const formData = this.state.formData;\n      formData[event.target.name] = event.target.value;\n      this.setState({\n        formData\n      });\n    };\n  }\n\n  render() {\n    const submitted = this.state.submitted;\n    let form = formArray.map((field, index) => {\n      return React.createElement(\"div\", {\n        key: field.input.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Input, Object.assign({}, field, this.state.formData, {\n        handleInputChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ValidatorForm, {\n      className: \"Form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, submitted ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : form, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        height: '25px',\n        margin: '25px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        height: '25px',\n        margin: '20px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(ButtonClass, {\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, submitted && 'Your form is submitted!' || !submitted && 'Submit')), React.createElement(ButtonClass, {\n      onClick: this.uploadWidget,\n      color: \"primary\",\n      variant: \"outlined\",\n      type: \"submit\",\n      style: {\n        top: '-110px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Add Image\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    authUser: state.authUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  createTalk\n})(CreateTalk);","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/CreateTalk/CreateTalk.js"],"names":["React","Component","ButtonClass","formArray","ValidatorForm","Input","Spinner","connect","createTalk","CreateTalk","state","formData","title","talk","image","submitted","uploadPictureToggle","uploadWidget","window","cloudinary","openUploadWidget","cloud_name","upload_preset","tags","error","result","console","log","event","info","secure_url","setState","successfullyCreatedTalk","email","password","handleSubmit","preventDefault","newUserObj","Object","assign","id","props","authUser","user","then","history","push","catch","handleChange","target","name","value","render","form","map","field","index","input","label","height","margin","top","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ButtonClass from '../../Factory/Button/ButtonClass'\nimport formArray from './CreateTalkConfig';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport Input from '../../Factory/Input/InputClass';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { createTalk } from '../../redux/action/talkAction';\n\nclass CreateTalk extends Component {\n\n  state = {\n    formData: {\n      title: '',\n      talk: '',\n      image: ''\n    },\n    submitted: false,\n    uploadPictureToggle: false\n  }\n  \n  uploadWidget = () => {\n    window.cloudinary.openUploadWidget({ cloud_name: 'dy6xduf53', upload_preset: 'gxaofwpa', tags:['hamster']},\n    (error, result)  => {\n        if (error) {\n          console.log(error)\n        } else {\n          \n          if (result.event === 'success') {\n            console.log(result.info.secure_url)\n            const { formData } = this.state;\n            formData['image'] = result.info.secure_url\n            this.setState({\n              ...this.state, \n              formData, \n\n            })\n          }\n\n        }\n    });\n  }\n\n  successfullyCreatedTalk = () => {\n    this.setState({\n      submitted: false,\n      formData: {\n        email: '',\n        password: ''\n      }\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      submitted: true\n    }, () => {\n\n      let newUserObj = Object.assign({}, this.state.formData);\n\n      newUserObj.id = this.props.authUser.user.id\n\n      this.props.createTalk(newUserObj)\n                .then(() => {\n                  this.successfullyCreatedTalk();\n                  this.props.history.push('/')\n                })\n                .catch(error => {\n                  console.log(error);\n                  this.setState({\n                    submitted: false\n                  })\n                })\n\n    });\n\n\n\n  }\n\n  handleChange = (event) => {\n  \n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n  render() {\n\n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    ) \n\n    return (\n      <div className='App'>\n\n     <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            <div style={{height: '25px',margin: '25px 20px'}}></div>\n\n\n         \n\n            <div style={{height: '25px',margin: '20px 20px'}}></div>\n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n            \n          </ValidatorForm>\n\n          <ButtonClass \n              onClick={this.uploadWidget}\n              color=\"primary\"\n              variant=\"outlined\"\n              type=\"submit\"\n              style={{top: '-110px'}}\n              >\n                Add Image\n           </ButtonClass>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authUser: state.authUser\n  };\n};\n\nexport default connect(mapStateToProps, { createTalk })(CreateTalk)"]},"metadata":{},"sourceType":"module"}