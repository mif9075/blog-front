{"ast":null,"code":"import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\nexport const handleUserTalkByID = id => async dispatch => {};\nexport const getAllUserTalks = id => async dispatch => {\n  try {\n    let foundAllUserTalks = await Axios.get(\"/talk/get-all-user-talks/\".concat(id));\n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    });\n    return Promise.resolve(foundAllUserTalks.data);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const createTalk = talkInfo => async dispatch => {\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title,\n    talk: talkInfo.talk,\n    image: talkInfo.image\n  };\n\n  try {\n    let success = await Axios.post('/talk/create-talk', talkObj);\n    console.log(success);\n    dispatch(successCreateTalk(success.data));\n    return Promise.resolve(success);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const getAllTalks = () => async dispatch => {\n  try {\n    let success = await Axios.get(\"/talk/get-all-talks\");\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    });\n    return Promise.resolve(success.data);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\n\nconst successCreateTalk = createdTalk => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  });\n};\n\nconst errorCreateTalk = message => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  });\n};\n\nexport const getTalkByID = id => async dispatch => {\n  try {\n    let foundTalk = await Axios.get(\"/talk/get-talk-by-id/\".concat(id));\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n    return Promise.resolve(foundTalk.data);\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/redux/action/talkAction.js"],"names":["CREATE_TALK","ERROR_CREATE_TALK","GET_ALL_TALKS","GET_TALK_BY_ID","GET_ALL_USER_TALKS","Axios","handleUserTalkByID","id","dispatch","getAllUserTalks","foundAllUserTalks","get","type","payload","data","Promise","resolve","error","console","log","errorCreateTalk","reject","createTalk","talkInfo","talkObj","title","talk","image","success","post","successCreateTalk","getAllTalks","createdTalk","message","getTalkByID","foundTalk"],"mappings":"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","sourcesContent":["import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const handleUserTalkByID = (id) => async dispatch => {\n  \n}\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n  \n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks.data);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n    console.log(success)\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}