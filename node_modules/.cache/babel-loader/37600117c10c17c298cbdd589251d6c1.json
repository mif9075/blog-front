{"ast":null,"code":"var _jsxFileName = \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup, handleErrorSignup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport MessageBar from '../../Factory/MessageBar/MessageBar';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        gender: '',\n        redirectSecond: 0\n      },\n      submitted: false\n    };\n\n    this.handleChange = event => {\n      const formData = this.state.formData;\n      formData[event.target.name] = event.target.value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.successfullySignedUp = () => {\n      this.setState({\n        submitted: false,\n        formData: {\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n          gender: ''\n        }\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        submitted: true\n      }, () => {\n        this.props.signup(this.state.formData).then(() => {\n          this.successfullySignedUp();\n          setTimeout(() => {\n            this.props.history.push('/sign-in');\n          }, 3000);\n        }).catch(error => {\n          this.props.handleErrorSignup(error.response.data.message);\n          this.setState({\n            submitted: false\n          });\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      const formData = this.state.formData;\n\n      if (value !== formData.password) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  render() {\n    const submitted = this.state.submitted;\n    let form = formArray.map((field, index) => {\n      return React.createElement(\"div\", {\n        key: field.input.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Input, Object.assign({}, field, this.state.formData, {\n        handleInputChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(React.Fragment, null, this.props.message.serverMessage !== null ? React.createElement(MessageBar, {\n      fontColorStyle: this.props.message.messageStyle.fontColorStyle,\n      dynamicClassName: this.props.message.messageStyle.dynamicClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.message.serverMessage, \" Redirecting to sign in page\") : '', React.createElement(ValidatorForm, {\n      className: \"Form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, submitted ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }) : form, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(ButtonClass, {\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, submitted && 'Your form is submitted!' || !submitted && 'Submit')));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signup,\n  handleErrorSignup\n})(Signup);","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Components/Signup/Signup.js"],"names":["React","Component","connect","Input","ButtonClass","ValidatorForm","formArray","signup","handleErrorSignup","Spinner","MessageBar","Signup","state","formData","username","email","password","confirmPassword","gender","redirectSecond","submitted","handleChange","event","target","name","value","setState","successfullySignedUp","handleSubmit","preventDefault","props","then","setTimeout","history","push","catch","error","response","data","message","componentDidMount","addValidationRule","render","form","map","field","index","input","label","serverMessage","messageStyle","fontColorStyle","dynamicClassName","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass'\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignUpConfig';\nimport { signup, handleErrorSignup } from '../../redux/action/authUserAction';\nimport Spinner from '../../Factory/Spinner/Spinner'\nimport MessageBar from '../../Factory/MessageBar/MessageBar';\n\n\nclass Signup extends Component {\n\n  state = {\n    formData: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      gender: '',\n      redirectSecond: 0\n    },\n    submitted: false,\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n        const { formData } = this.state;\n        if (value !== formData.password) {\n            return false;\n        }\n        return true;\n    });\n  }\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n  successfullySignedUp = () => {\n    this.setState({\n      submitted: false,\n      formData: {\n        name: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        gender: ''\n      }\n    })\n  }\n\n  handleSubmit = (event) => {\n      event.preventDefault();\n      this.setState({ \n          submitted: true, \n        }, () => {\n\n          this.props.signup(this.state.formData)\n              .then(() => {\n                this.successfullySignedUp();\n                setTimeout(() => {\n                  this.props.history.push('/sign-in') \n                }, 3000)      \n              })\n              .catch(error => {\n                this.props.handleErrorSignup(error.response.data.message)\n                this.setState({\n                  submitted: false\n                })\n              })\n      });\n  }\n\n  render() {\n    \n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    ) \n     \n    return (\n\n    \n      <>  \n      {this.props.message.serverMessage !== null ? <MessageBar \n                                                      fontColorStyle={this.props.message.messageStyle.fontColorStyle}\n                                                      dynamicClassName={this.props.message.messageStyle.dynamicClassName}\n                                                      >{this.props.message.serverMessage} Redirecting to sign in page</MessageBar> : '' }\n\n\n      <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            \n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n            \n          </ValidatorForm>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message\n  }\n}\n\nexport default connect(mapStateToProps, { signup, handleErrorSignup })(Signup)"]},"metadata":{},"sourceType":"module"}