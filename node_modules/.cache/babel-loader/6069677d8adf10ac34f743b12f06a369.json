{"ast":null,"code":"var _jsxFileName = \"/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Factory/Input/InputClass.js\";\nimport React from 'react';\nimport { TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = props => {\n  const input = props.input;\n  let dynamicInputField = null;\n\n  switch (input.type) {\n    case 'text':\n      console.log(input);\n      dynamicInputField = React.createElement(TextValidator, {\n        id: input.id,\n        label: input.label,\n        required: input.required,\n        style: input.style,\n        name: input.name,\n        type: input.type,\n        value: props.name,\n        validators: input.validators,\n        errorMessages: input.errorMessages,\n        onChange: props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      });\n      break;\n\n    case 'email':\n      dynamicInputField = React.createElement(TextValidator, {\n        id: input.id,\n        label: input.label,\n        required: input.required,\n        style: input.style,\n        name: input.name,\n        type: input.type,\n        value: props.email,\n        validators: input.validators,\n        errorMessages: input.errorMessages,\n        onChange: props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n      break;\n\n    case 'password':\n      dynamicInputField = React.createElement(TextValidator, {\n        id: input.id,\n        label: input.label,\n        required: input.required,\n        style: input.style,\n        name: input.name,\n        type: input.type,\n        value: props.password,\n        validators: input.validators,\n        errorMessages: input.errorMessages,\n        onChange: props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n      break;\n\n    case 'confirmPassword':\n      dynamicInputField = React.createElement(TextValidator, {\n        id: input.id,\n        label: input.label,\n        required: input.required,\n        style: input.style,\n        name: input.name,\n        type: \"password\",\n        value: props.confirmPassword,\n        validators: input.validators,\n        errorMessages: input.errorMessages,\n        onChange: props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n      break;\n\n    case 'select':\n      dynamicInputField = React.createElement(FormControl, {\n        style: input.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"input-gende\",\n        style: {\n          top: '-15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, props.gender.length > 1 ? '' : 'Choose Your Gender'), React.createElement(SelectValidator, {\n        value: props.gender || '',\n        onChange: props.handleInputChange,\n        validators: input.validators,\n        errorMessages: input.errorMessages,\n        name: input.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, input.genders.map(option => {\n        return React.createElement(MenuItem, {\n          key: option,\n          value: option,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, option);\n      })));\n      break;\n\n    case 'multiline':\n      dynamicInputField = React.createElement(TextField, {\n        id: input.id,\n        label: input.label,\n        required: input.required,\n        style: input.style,\n        name: input.name,\n        type: input.name,\n        onChange: props.handleInputChange,\n        rows: input.rows,\n        multiline: input.multiline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n      break;\n\n    default:\n      return null;\n  }\n\n  return React.createElement(React.Fragment, null, dynamicInputField);\n};\n\nexport default InputClass;\n/*\n\nimport React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel, Select } from '@material-ui/core';\n\nconst InputClass = (props) => {\n  const { input } = props;\n\n  let dynamicInputField = null \n\n  \n  switch (input.type) {\n\n    case('text'):\n\n      dynamicInputField = <TextField \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextField \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextField \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"select-multiple\">Choose You Gender</InputLabel>\n                              <Select\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                        \n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </Select>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass\n\n*/","map":{"version":3,"sources":["/Users/pakchu/Desktop/CIM-All-Code/blog-auth-redux/src/Factory/Input/InputClass.js"],"names":["React","TextField","MenuItem","FormControl","InputLabel","TextValidator","SelectValidator","InputClass","props","input","dynamicInputField","type","console","log","id","label","required","style","name","validators","errorMessages","handleInputChange","email","password","confirmPassword","top","gender","length","genders","map","option","rows","multiline"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = (props) => {\n  const { input } = props;\n  let dynamicInputField = null \n  switch (input.type) {\n\n    case('text'):\nconsole.log(input)\n      dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.name}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.email}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.password}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('confirmPassword'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type='password'\n                              value={props.confirmPassword}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break;     \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"input-gende\" style={{top: '-15px'}}>{props.gender.length > 1 ? '' : 'Choose Your Gender'}</InputLabel>\n                              <SelectValidator\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </SelectValidator>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass\n\n\n\n/*\n\nimport React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel, Select } from '@material-ui/core';\n\nconst InputClass = (props) => {\n  const { input } = props;\n\n  let dynamicInputField = null \n\n  \n  switch (input.type) {\n\n    case('text'):\n\n      dynamicInputField = <TextField \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextField \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextField \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"select-multiple\">Choose You Gender</InputLabel>\n                              <Select\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                        \n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </Select>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass\n\n*/"]},"metadata":{},"sourceType":"module"}