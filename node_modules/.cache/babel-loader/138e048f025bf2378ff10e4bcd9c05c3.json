{"ast":null,"code":"import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS, DELETE_USER_TALK_BY_ID } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\nexport const handleUserTalkByID = id => async dispatch => {\n  try {\n    let deletedByID = await Axios.delete(\"/talk/delete-by-id/\".concat(id));\n    dispatch({\n      type: DELETE_USER_TALK_BY_ID,\n      payload: deletedByID,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const getAllUserTalks = id => async dispatch => {\n  try {\n    let foundAllUserTalks = await Axios.get(\"/talk/get-all-user-talks/\".concat(id));\n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    });\n    return Promise.resolve(foundAllUserTalks.data);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const createTalk = talkInfo => async dispatch => {\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title,\n    talk: talkInfo.talk,\n    image: talkInfo.image\n  };\n\n  try {\n    let success = await Axios.post('/talk/create-talk', talkObj);\n    console.log(success);\n    dispatch(successCreateTalk(success.data));\n    return Promise.resolve(success);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\nexport const getAllTalks = () => async dispatch => {\n  try {\n    let success = await Axios.get(\"/talk/get-all-talks\");\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    });\n    return Promise.resolve(success.data);\n  } catch (error) {\n    console.log(error);\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};\n\nconst successCreateTalk = createdTalk => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  });\n};\n\nconst errorCreateTalk = message => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  });\n};\n\nexport const getTalkByID = id => async dispatch => {\n  try {\n    let foundTalk = await Axios.get(\"/talk/get-talk-by-id/\".concat(id));\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n    return Promise.resolve(foundTalk.data);\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["/Users/codeimmersives/Desktop/Archive 5/blog-auth-redux 7/src/redux/action/talkAction.js"],"names":["CREATE_TALK","ERROR_CREATE_TALK","GET_ALL_TALKS","GET_TALK_BY_ID","GET_ALL_USER_TALKS","DELETE_USER_TALK_BY_ID","Axios","handleUserTalkByID","id","dispatch","deletedByID","delete","type","payload","error","console","log","errorCreateTalk","Promise","reject","getAllUserTalks","foundAllUserTalks","get","data","resolve","createTalk","talkInfo","talkObj","title","talk","image","success","post","successCreateTalk","getAllTalks","createdTalk","message","getTalkByID","foundTalk"],"mappings":"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","sourcesContent":["import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS, DELETE_USER_TALK_BY_ID } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const handleUserTalkByID = (id) => async dispatch => {\n  try {\n\n    let deletedByID = await Axios.delete(`/talk/delete-by-id/${id}`);\n\n    dispatch({\n      type: DELETE_USER_TALK_BY_ID,\n      payload: deletedByID,\n      id\n    })\n \n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n}\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n  \n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks.data);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n    console.log(success)\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}